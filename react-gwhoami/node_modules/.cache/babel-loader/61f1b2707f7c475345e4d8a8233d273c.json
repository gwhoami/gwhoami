{"ast":null,"code":"const {\n  default: axios\n} = require(\"axios\");\n\nconst Instance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n}); // Instance.interceptors.request.use((config) => {\n//     config.headers['Content-Type'] = 'application/json';\n//     return config;\n// }, (error) => {\n//     return Promise.reject(error);\n// });\n\nexport const apiPostCall = (path, params) => {\n  return Instance.post(path, params).then(res => res.data).catch(Err => {\n    return {\n      isError: true,\n      Error: Err\n    };\n  });\n};\nexport const apiGetCall = (path, params) => {\n  return Instance.get(path, {\n    params: { ...params\n    }\n  }).then(res => res.data).catch(Err => {\n    return {\n      isError: true,\n      Error: Err\n    };\n  });\n};","map":{"version":3,"sources":["D:/Git-Repo/gwhoami/react-gwhoami/src/helper/API.js"],"names":["default","axios","require","Instance","create","baseURL","process","env","REACT_APP_API_URL","apiPostCall","path","params","post","then","res","data","catch","Err","isError","Error","apiGetCall","get"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,OAAO,EAAEC;AAAX,IAAqBC,OAAO,CAAC,OAAD,CAAlC;;AAEA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADK,CAAb,CAAjB,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACzC,SAAOR,QAAQ,CAACS,IAAT,CAAcF,IAAd,EAAoBC,MAApB,EAA4BE,IAA5B,CAAiCC,GAAG,IAAIA,GAAG,CAACC,IAA5C,EACNC,KADM,CACAC,GAAG,IAAI;AACV,WAAO;AAACC,MAAAA,OAAO,EAAE,IAAV;AAAgBC,MAAAA,KAAK,EAAEF;AAAvB,KAAP;AACH,GAHM,CAAP;AAIH,CALM;AAOP,OAAO,MAAMG,UAAU,GAAG,CAACV,IAAD,EAAOC,MAAP,KAAkB;AACxC,SAAOR,QAAQ,CAACkB,GAAT,CAAaX,IAAb,EAAmB;AAACC,IAAAA,MAAM,EAAE,EAAC,GAAGA;AAAJ;AAAT,GAAnB,EAA0CE,IAA1C,CAA+CC,GAAG,IAAIA,GAAG,CAACC,IAA1D,EACNC,KADM,CACAC,GAAG,IAAI;AACV,WAAO;AAACC,MAAAA,OAAO,EAAE,IAAV;AAAgBC,MAAAA,KAAK,EAAEF;AAAvB,KAAP;AACH,GAHM,CAAP;AAIH,CALM","sourcesContent":["const { default: axios } = require(\"axios\");\r\n\r\nconst Instance = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL\r\n});\r\n\r\n// Instance.interceptors.request.use((config) => {\r\n//     config.headers['Content-Type'] = 'application/json';\r\n//     return config;\r\n// }, (error) => {\r\n//     return Promise.reject(error);\r\n// });\r\n\r\nexport const apiPostCall = (path, params) => {\r\n    return Instance.post(path, params).then(res => res.data)\r\n    .catch(Err => {\r\n        return {isError: true, Error: Err}\r\n    });\r\n}\r\n\r\nexport const apiGetCall = (path, params) => {\r\n    return Instance.get(path, {params: {...params}}).then(res => res.data)\r\n    .catch(Err => {\r\n        return {isError: true, Error: Err}\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}